<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product List</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* Include your existing styles here */
        
        /* General Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Inter', sans-serif;
}

body {
    background-color: #f8fafc;
}

/* Navbar Styles */
.navbar {
    background-color: white;
    padding: 1rem 2rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
    position: sticky;
    top: 0;
    z-index: 100;
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav-logo {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.nav-logo img {
    height: 40px;
    width: auto;
    object-fit: contain;
}

.canwalk {
    margin: 0;
    font-size: 24px;
    font-weight: 700;
    color: #0f172a;
    letter-spacing: 0.5px;
    text-transform: uppercase;
    background: linear-gradient(45deg, #0891b2, #0284c7);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.nav-links {
    display: flex;
    gap: 2rem;
    align-items: center;
}

.nav-link {
    color: #64748b;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s;
}

.nav-link:hover {
    color: #0f172a;
}

.nav-cart {
    position: relative;
    color: #0f172a;
}

.cart-count {
    position: absolute;
    top: -8px;
    right: -8px;
    background-color: #06b6d4;
    color: white;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
}

/* Hero Section */
.hero {
    background: linear-gradient(to right, #0891b2, #0284c7);
    padding: 4rem 2rem;
    text-align: center;
    color: white;
}

.hero h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

.hero p {
    font-size: 1.1rem;
    opacity: 0.9;
}

/* Search Bar */
.search-container {
    display: flex;
    justify-content: center;
    margin: 2rem 0;
}

.search-bar {
    width: 50%;
    padding: 0.75rem 1rem;
    border: 1px solid #e2e8f0;
    border-radius: 0.5rem;
    font-size: 1rem;
}

.search-bar:focus {
    outline: none;
    border-color: #0891b2;
}

/* Sort Options */
.sort-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding: 0 2rem;
}

.sort-select {
    padding: 0.5rem;
    border: 1px solid #e2e8f0;
    border-radius: 0.5rem;
    font-size: 1rem;
    background: white;
    color: #64748b;
    cursor: pointer;
}

.sort-select:focus {
    outline: none;
    border-color: #0891b2;
}

/* Products Grid */
.products-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 2rem;
}

.products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
}

/* Product Card */
.product-card {
    background: white;
    border-radius: 1rem;
    overflow: hidden;
    transition: transform 0.2s, box-shadow 0.2s;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.product-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 24px -8px rgba(0, 0, 0, 0.15);
}

.product-image {
    position: relative;
    padding-top: 100%;
    background: #f8fafc;
    overflow: hidden;
}

.product-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    padding: 1rem;
    transition: transform 0.3s ease;
}

.product-card:hover .product-image img {
    transform: scale(1.05);
}

.product-details {
    padding: 1.5rem;
}

.product-category {
    font-size: 0.875rem;
    color: #64748b;
    margin-bottom: 0.5rem;
}

.product-name {
    font-size: 1.25rem;
    color: #0f172a;
    margin-bottom: 0.5rem;
    font-weight: 600;
}

.product-price {
    font-size: 1.5rem;
    color: #0891b2;
    font-weight: 700;
    margin-bottom: 1rem;
}

.add-to-cart-btn {
    width: 100%;
    padding: 0.75rem;
    background: #0891b2;
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    text-decoration: none;
}

.add-to-cart-btn:hover {
    background: #0369a1;
}

.wishlist-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: white;
    border: none;
    padding: 0.5rem;
    border-radius: 9999px;
    cursor: pointer;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s;
    z-index: 10;
}

.wishlist-btn:hover {
    transform: scale(1.1);
}

/* No Products */
.no-products {
    grid-column: 1 / -1;
    text-align: center;
    padding: 2rem;
    color: #64748b;
    font-size: 1.2rem;
}

.breadcrumbs {
    font-size: 0.875rem;
    color: #64748b;
    padding: 1rem 2rem;
}

.breadcrumb-link {
    color: #0891b2;
    text-decoration: none;
}

.breadcrumb-link:hover {
    text-decoration: underline;
}

.breadcrumb-current {
    color: #0f172a;
    font-weight: 600;
}


    </style>
</head>
<%- include('../../partials/header') %>
<body>

    <div class="breadcrumbs">
        <a href="/" class="breadcrumb-link">Home</a> &gt; 
        <a href="/order" class="breadcrumb-link">Order</a> &gt; 
        <span class="breadcrumb-current">Product </span>
    </div>
    
    

    <div class="products-container">
        <!-- Search Bar -->
        <div class="search-container">
            <input
                type="text"
                class="search-bar"
                placeholder="Search for products..."
                id="search-bar"
            />
        </div>

        <!-- Sorting Options -->
        <div class="sort-container">
            <label for="sort-select">Sort By:</label>
            <select id="sort-select" class="sort-select">
                <option value="popularity">Popularity</option>
                <option value="price-low-high">Price: Low to High</option>
                <option value="price-high-low">Price: High to Low</option>
                <option value="ratings">Average Ratings</option>
                <option value="a-z">A-Z</option>
                <option value="z-a">Z-A</option>
            </select>
        </div>



        <!-- Products Grid -->
        <div class="products-grid" id="products-grid">
            <!-- Example of how products will be rendered dynamically -->
            <% if (products && products.length > 0) { %>
                <% products.forEach(product => { %>
                    <div class="product-card" data-name="<%= product.name %>" data-price="<%= product.price %>" data-popularity="<%= product.popularity %>" data-ratings="<%= product.ratings %>">
                        <div class="product-image">
                            <img src="<%= product.images[0] %>" alt="<%= product.name %>">
                            <button class="wishlist-btn" data-product-id="<%= product._id %>">
                                <i class="far fa-heart"></i>
                            </button>
                        </div>


                        <div class="product-details">
                            <h3 class="product-name"><%= product.name %></h3>
                            <div class="product-price">â‚¹<%= product.price %></div>

                           <a href="/product/details/<%= product._id %>" class="add-to-cart-btn">
                            Add to Cart
                           </a>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <p class="no-products">No products available at the moment.</p>
            <% } %>
        </div>
    

   <!-- Previous Page Form -->
<form action="/product" method="get">
    <!-- Only decrease page if currentPage is greater than 1 -->
    <input type="hidden" name="page" value="<%= currentPage - 1 %>" />
    <button type="submit" <%= currentPage === 1 ? 'disabled' : '' %>>Previous</button>
</form>


<!-- Display current page and total pages -->
<span>Page <%= currentPage %> of <%= totalPages %></span>

<!-- Next Page Form -->
<form action="/product" method="get">
    <!-- Only increase page if currentPage is less than totalPages -->
    <input type="hidden" name="page"  value="<%= currentPage + 1 %>" />
    <button type="submit" <%= currentPage === totalPages ? 'disabled' : '' %>>Next</button>
</form>

         
        
    </div>
        


   

    <script>
        const productsGrid = document.getElementById('products-grid');
        const searchBar = document.getElementById('search-bar');
        const sortSelect = document.getElementById('sort-select');

        // Search functionality
        searchBar.addEventListener('input', () => {
            const query = searchBar.value.toLowerCase();
            const productCards = document.querySelectorAll('.product-card');
            
            productCards.forEach(card => {
                const name = card.dataset.name.toLowerCase();
                if (name.includes(query)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        });

        // Sort functionality
        sortSelect.addEventListener('change', () => {
            const sortValue = sortSelect.value;
            const productCards = Array.from(document.querySelectorAll('.product-card'));

            const sortedCards = productCards.sort((a, b) => {
                switch (sortValue) {
                    case 'price-low-high':
                        return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
                    case 'price-high-low':
                        return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
                    case 'popularity':
                        return parseFloat(b.dataset.popularity) - parseFloat(a.dataset.popularity);
                    case 'ratings':
                        return parseFloat(b.dataset.ratings) - parseFloat(a.dataset.ratings);
                    case 'a-z':
                        return a.dataset.name.localeCompare(b.dataset.name);
                    case 'z-a':
                        return b.dataset.name.localeCompare(a.dataset.name);
                    case 'new-arrivals':
                        return b.dataset.new - a.dataset.new; // Replace with proper logic if you have timestamps
                    case 'featured':
                        return 0; // Replace with proper logic for featured sorting
                    default:
                        return 0;
                }
            });

            // Clear and re-append sorted cards
            productsGrid.innerHTML = '';
            sortedCards.forEach(card => productsGrid.appendChild(card));
        });


        document.addEventListener('DOMContentLoaded',()=>{
            const wishlistbuttons = document.querySelectorAll('.wishlist-btn')

            wishlistbuttons.forEach(button=>{
                button.addEventListener('click',async (event)=>{
                    const productId = button.getAttribute('data-product-id');
                    const icon = button.querySelector('i')
                    const isAdding = !icon.classList.contains('fas');
                    
                    try{
            const response = await fetch(`/wishlist/add`,{
                method:'POST',
                headers:{'Content-Type':'application/json'},
                body: JSON.stringify({productId})

            });

            if(!response.ok){
                throw new Error ('Failed to fetch from the server')
            }

            const result = await response.json();
if(result.success){
    icon.classList.toggle('far');
    icon.classList.toggle('fas');

    // Using SweetAlert for success
    Swal.fire({
        icon: 'success',
        title: 'Success',
        text: result.message, // Your message from the result object
        confirmButtonText: 'OK'
    }).then(() => {
        window.location.href = '/wishlist';
    });
} else {
    // Using SweetAlert for error
    Swal.fire({
        icon: 'error',
        title: 'Oops!',
        text: 'Something went wrong. Please try again.',
        confirmButtonText: 'OK'
    });
}
} catch(err) {
    console.error('Error', err);

    // Using SweetAlert for failed request
    Swal.fire({
        icon: 'error',
        title: 'Failed!',
        text: 'Failed to update the wishlist.',
        confirmButtonText: 'OK'
    });
}


                })
            })
            
        })


        

        
    </script>
</body>
</html> 